//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31442593
// Cuda compilation tools, release 11.7, V11.7.99
// Based on NVVM 7.0.1
//

.version 7.7
.target sm_52
.address_size 64

	// .globl	__raygen__rmq
.const .align 8 .b8 params[32];

.visible .entry __raygen__rmq()
{
	.reg .f32 	%f<15>;
	.reg .b32 	%r<79>;
	.reg .b64 	%rd<10>;


	// begin inline asm
	call (%r1), _optix_get_launch_index_x, ();
	// end inline asm
	ld.const.u64 	%rd2, [params+16];
	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.u32 	%rd4, %r1, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.v2.u32 	{%r75, %r76}, [%rd5];
	mov.u32 	%r74, 0;
	mov.u32 	%r42, 1;
	ld.const.v2.f32 	{%f10, %f11}, [params+24];
	cvt.rn.f32.s32 	%f2, %r75;
	cvt.rn.f32.s32 	%f3, %r76;
	sub.f32 	%f8, %f11, %f10;
	mov.b32 	%r43, %f11;
	ld.const.u64 	%rd1, [params];
	mov.f32 	%f4, 0f3F800000;
	mov.f32 	%f9, 0f00000000;
	mov.u32 	%r37, 255;
	// begin inline asm
	call(%r4,%r5,%r6,%r7,%r8,%r9,%r10,%r11,%r12,%r13,%r14,%r15,%r16,%r17,%r18,%r19,%r20,%r21,%r22,%r23,%r24,%r25,%r26,%r27,%r28,%r29,%r30,%r31,%r32,%r33,%r34,%r35),_optix_trace_typed_32,(%r74,%rd1,%f10,%f2,%f3,%f4,%f9,%f9,%f9,%f8,%f9,%r37,%r42,%r74,%r74,%r74,%r42,%r43,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74,%r74);
	// end inline asm
	mov.b32 	%f13, %r4;
	add.f32 	%f14, %f10, %f13;
	ld.const.u64 	%rd6, [params+8];
	cvta.to.global.u64 	%rd7, %rd6;
	mul.wide.u32 	%rd8, %r1, 4;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f32 	[%rd9], %f14;
	ret;

}
	// .globl	__closesthit__rmq
.visible .entry __closesthit__rmq()
{
	.reg .f32 	%f<2>;
	.reg .b32 	%r<3>;


	// begin inline asm
	call (%f1), _optix_get_ray_tmax, ();
	// end inline asm
	mov.b32 	%r2, %f1;
	mov.u32 	%r1, 0;
	// begin inline asm
	call _optix_set_payload, (%r1, %r2);
	// end inline asm
	ret;

}
	// .globl	__miss__rmq
.visible .entry __miss__rmq()
{
	.reg .b32 	%r<3>;


	mov.u32 	%r1, 0;
	mov.u32 	%r2, 2139095040;
	// begin inline asm
	call _optix_set_payload, (%r1, %r2);
	// end inline asm
	ret;

}

